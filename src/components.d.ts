/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { HomeView as HomeView } from './components/home-view/home-view';

interface HTMLHomeViewElement extends HomeView, HTMLElement {
}
declare var HTMLHomeViewElement: {
  prototype: HTMLHomeViewElement;
  new (): HTMLHomeViewElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "home-view": HTMLHomeViewElement;
  }
  interface ElementTagNameMap {
      "home-view": HTMLHomeViewElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "home-view": JSXElements.HomeViewAttributes;
      }
  }
  namespace JSXElements {
      export interface HomeViewAttributes extends HTMLAttributes {
        
      }
  }
}

import { PodcastSummary as PodcastSummary } from './components/home-view/podcast-summary/podcast-summary';

interface HTMLPodcastSummaryElement extends PodcastSummary, HTMLElement {
}
declare var HTMLPodcastSummaryElement: {
  prototype: HTMLPodcastSummaryElement;
  new (): HTMLPodcastSummaryElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "podcast-summary": HTMLPodcastSummaryElement;
  }
  interface ElementTagNameMap {
      "podcast-summary": HTMLPodcastSummaryElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "podcast-summary": JSXElements.PodcastSummaryAttributes;
      }
  }
  namespace JSXElements {
      export interface PodcastSummaryAttributes extends HTMLAttributes {
        
          podcast?: any
      }
  }
}

import { MyName as MyName } from './components/my-name/my-name';

interface HTMLMyNameElement extends MyName, HTMLElement {
}
declare var HTMLMyNameElement: {
  prototype: HTMLMyNameElement;
  new (): HTMLMyNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  interface ElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-name": JSXElements.MyNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyNameAttributes extends HTMLAttributes {
        
          first?: string,
          last?: string,
          foo?: boolean | "true" | "false"
      }
  }
}

import { PodcastView as PodcastView } from './components/podcast-view/podcast-view';

interface HTMLPodcastViewElement extends PodcastView, HTMLElement {
}
declare var HTMLPodcastViewElement: {
  prototype: HTMLPodcastViewElement;
  new (): HTMLPodcastViewElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "podcast-view": HTMLPodcastViewElement;
  }
  interface ElementTagNameMap {
      "podcast-view": HTMLPodcastViewElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "podcast-view": JSXElements.PodcastViewAttributes;
      }
  }
  namespace JSXElements {
      export interface PodcastViewAttributes extends HTMLAttributes {
        
          podcastId?: string,
          match?: any
      }
  }
}

import { PodcasterApp as PodcasterApp } from './components/podcaster-app/podcaster-app';

interface HTMLPodcasterAppElement extends PodcasterApp, HTMLElement {
}
declare var HTMLPodcasterAppElement: {
  prototype: HTMLPodcasterAppElement;
  new (): HTMLPodcasterAppElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "podcaster-app": HTMLPodcasterAppElement;
  }
  interface ElementTagNameMap {
      "podcaster-app": HTMLPodcasterAppElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "podcaster-app": JSXElements.PodcasterAppAttributes;
      }
  }
  namespace JSXElements {
      export interface PodcasterAppAttributes extends HTMLAttributes {
        
          isLoading?: boolean | "true" | "false"
      }
  }
}

import { AppHeader as AppHeader } from './components/shared/app-header/app-header';

interface HTMLAppHeaderElement extends AppHeader, HTMLElement {
}
declare var HTMLAppHeaderElement: {
  prototype: HTMLAppHeaderElement;
  new (): HTMLAppHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "app-header": HTMLAppHeaderElement;
  }
  interface ElementTagNameMap {
      "app-header": HTMLAppHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "app-header": JSXElements.AppHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface AppHeaderAttributes extends HTMLAttributes {
        
          loading?: boolean | "true" | "false"
      }
  }
}

